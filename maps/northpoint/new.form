tables:
 - helpdesk

# Helper tables. These contain no updated fields bit list useful information (At least so far)
join:
 - table: school
   type: left
   on:
    source: helpdesk.school
    dest: school.scid
    comparison: is
 - table: section
   type: left
   on:
    source: helpdesk.section
    dest: section.sid
    comparison: is
 - table: priority
   type: left
   on:
    source: helpdesk.priority
    dest: priority.prid
    comparison: is

primarytable: helpdesk
primarykey: helpdesk

# Describes primary key to compare against when selecting. select from helpdesk where ticket is $VALUE
# what does this do when inserting?
where:
 helpdesk:
  db_field: ticket
  html_field: ticket
  table: helpdesk
  comparison: is

sort:
  - helpdesk.ticket

lists:
 # select scid as txt, name as lbl, scid as sel from school where scid order by name;
 school_loop:
  # table the info is coming from
  table: school
  # what fields to select from that table. Note: txt, lbl and sel are currently MANDATORY names.
  fields: scid as school_scid, name as school_name, scid as selected
  # When populating loop, compare with this field's result for a match to determine what should be selected.
  select_with: selected
  # Default value to select if none is given by user in form submit (see value_from_html_field)
  default_selected: -1
  # Use where, comparison,whervalue to skip deleted, i.e. where school.deleted != 1
  where: deleted
  comparison: is not
  wherevalue: 1
  sort: name
  # Get from the field 'school' in the form submit the value to match against in your where statement.
  value_from_html_field: school
  value_from_db_field: School
 priority_loop:
  table: priority
  fields: prid as priority_prid, description as priority_desc, prid as selected
  select_with: selected
  where:
  comparison: is
  default_selected: 3
  sort: severity
  value_from_html_field: priority
  value_from_db_field: Priority
 section_loop:
  table: section
  fields: sid as section_sid, name as section_label, sid as selected
  select_with: selected
  where:
  comparison: is
  default_selected: 1
  value_from_html_field: section
  value_from_db_field: Section
  sort: name

# Select all of these fields on select statement, ignoring the tables
# on update/insert, for each table listed, update its fields from the form submit as associated

#####
# The structure is:
# fields:
#  database_table:
#   - db_field: table.field
#   - ht_field: html_template_tmpl_var_name
#   - html_field: html_form_field_name
#   - as: Some Description
#
# If a db_field exists, that is the field to INSERT into or UPDATE into.
# If a db_field exists, that is the field to SELECT data from.
# If a ht_field exists, that is the field to write from a select into.
# If a html_field exists, that is the field to pull data for an insert or update from.
# db_field and html_field must both exist for an insert or update to be attempted.
# db_field and ht_field must both exist for a select to be attempted.
# as is used a lot internally and must be unique per .form file. It will be used to refer to a field that fails a 
# .req requiredment.

fields:
 school:
  - db_field: school.name
    as: School Name
    ht_field: school_name
 priority:
  - db_field: priority.description
    as: Priority Description
    ht_field: priority_name
 section:
  - db_field: school.name
    as: Section Name
    ht_field: section_name
 helpdesk:
    # Database field from which to draw and update
  - db_field: helpdesk.ticket
    # Display name (if ever displayed). Do not assume this is unique!
    as: Ticket
  - db_field: helpdesk.school
    as: School
    html_field: school
  - db_field: helpdesk.barcode
    as: Barcode
    ht_field: helpdesk_barcode
    html_field: barcode
  - db_field: helpdesk.location
    as: Room
    ht_field: helpdesk_location
    html_field: location
  - db_field: helpdesk.updated
    as: Updated
  - db_field: helpdesk.requested
    as: Opened
  - db_field: helpdesk.author
    as: Your name
    ht_field: helpdesk_author
    html_field: author
  - db_field: helpdesk.contact
    as: Contact
    ht_field: helpdesk_contact
    html_field: contact
  - db_field: helpdesk.contact_phone
    as: Phone Number
    ht_field: helpdesk_phone
    html_field: phone
  - db_field: helpdesk.email
    as: Email
    ht_field: helpdesk_email
    html_field: email
  - db_field: helpdesk.problem
    as: Problem Description
    ht_field: helpdesk_problem
    html_field: problem
  - db_field: helpdesk.troubleshot
    as: Troubleshooting Tried
    ht_field: helpdesk_troubleshot
    html_field: troubleshoot
  - db_field: helpdesk.notes
    as: Notes
  - db_field: helpdesk.tech
    as: Processed By
  - db_field: helpdesk.serial
    as: Serial Number
    ht_field: helpdesk_serial
    html_field: serial
  - db_field: helpdesk.status
    as: Status
  - db_field: helpdesk.priority
    as: Priority
    html_field: priority
  - db_field: helpdesk.section
    as: Section
    html_field: section
  - db_field: helpdesk.free
    as: When Free
    ht_field: when_free
    html_field: whenfree

# into this:
# select helpdesk.ticket as "Ticket",helpdesk.barcode as "CCPS#",i.room as "Location",hardware_type.name as "Hardware Type",school.name as "School",softwareconfig.os as "Operating System",equipment.model as "Model",vendor.name as "Vendor" from inventory as i,helpdesk left join hardware_type on (hardware_type.hwid = inventory.hardware_type) left join inventory on (helpdesk.barcode = inventory.ccps) left join school on (helpdesk.school = school.scid) left join softwareconfig on (softwareconfig.swid = inventory.software) left join equipment on (equipment.eid = inventory.model) left join vendor on (equipment.vendor = vendor.vid) where helpdesk.ticket = 1; 
